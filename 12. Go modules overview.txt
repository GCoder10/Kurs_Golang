https://blog.golang.org/using-go-modules
Obecnie zjawisko zależności i używania zewnętrznych pakietów (3-cich) przez programistów jest 
bardzo mocno rozpowszechnione w porównaniu do tego, co było kiedyś, co nie znaczy, że jest
dobre (wyjaśnione w pliku '11. Package management.txt').



============================================================================================
Rozpoczęcie używania modułów w Go:
	mkdir start_working_with_modules
	cd start_working_with_modules/
	
	
	VSC -> new file:
		goworkspace/start_working_with_modules/hello.go
		goworkspace/start_working_with_modules/hello_test.go
		
	go mod init example.com/username/repo
	ls -la
	Jest plik z rozszerzeniem .mod
	

	$ cat go.mod
	module example.com/username/repo

	go 1.16



Sprawdzenie, czy całość działa:
	$ go test
	PASS
	ok      example.com/username/repo       1.356s


Zamiast nazwy domeny, może być cokolwiek.


============================================================================================
Dodawanie zależności:
	Zmiana pliku hello.go na:
	
		package hello

		import "rsc.io/quote"

		func Hello() string {
			return quote.Hello()
		}
	
	Usunięcie go.mod
	go mod init example/username/repo
	
	$ cat go.mod
	module example/username/repo

	go 1.16
	
	
	Teraz jeżeli spróbujemy uruchomić projekt z dodaną taką zależnością w 
	instrukcji ze słowem kluczowym import, automatycznie pobierze się
	niezbędny pakunek.
	Możliwe pakiety: https://pkg.go.dev/
	Zmiany odnośnie używania takiego pakunku zostaną automatycznie naniesione
	w pliku go.mod
	
	
	---------------------------------
	$ go test
	hello.go:3:8: no required module provides package rsc.io/quote; to add it:
			go get rsc.io/quote
			
			
			
	$ go get rsc.io/quote
	go: downloading rsc.io/quote v1.5.2
	go: downloading rsc.io/sampler v1.3.0
	go: downloading golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
	go get: added rsc.io/quote v1.5.2
	

	$ go test
	PASS
	ok      example/username/repo   1.393s
	

	$ cat go.mod
	module example/username/repo

	go 1.16

	require rsc.io/quote v1.5.2 // indirect
	---------------------------------
	$ cat go.sum
	golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c h1:qgOY6WgZOaTkIIMiVjBQcw93ERBE4m30iBm00nkL0i8=
	golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c/go.mod h1:NqM8EUOU14njkJ3fqMW+pc6Ldnwhi/IjpwHt7yyuwOQ=
	rsc.io/quote v1.5.2 h1:w5fcysjrx7yqtD/aO+QwRjYZOKnaM9Uh2b40tElTs3Y=
	rsc.io/quote v1.5.2/go.mod h1:LzX7hefJvL54yjefDEDHNONDjII0t9xZLPXsUe+TKr0=
	rsc.io/sampler v1.3.0 h1:7uVkIFmeBqHfdjD+gZwtXXI+RODJ2Wc4O7MPEh/QiW4=
	rsc.io/sampler v1.3.0/go.mod h1:T1hPZKmBbMNahiBKFy5HrXp6adAjACjK9JXDnKaTXpA=
	
	
	
Wykazanie wszystkich zależności w naszym projekcie Go:
	$ go list -m all
	example/username/repo
	golang.org/x/text v0.0.0-20170915032832-14c0d48ead0c
	rsc.io/quote v1.5.2
	rsc.io/sampler v1.3.0
	
	
	
go.sum zawiera kryptograficzny hash, sprawdza spójność plików projektu wraz ze znajdującymi się
w nim zależnościami.